name: Build
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: digipost/set-timezone@v1.0
        with:
          timezoneLinux: "Europe/Oslo"
      - uses: actions/checkout@v2

      - name: Set REVISION environment variable
        run: echo "REVISION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Rename main branch revision to latest
        if: ${{env.REVISION=='master'}}
        run: echo "REVISION=latest" >> $GITHUB_ENV

      - name: Add snapshot version suffix on untagged (non-released) builds
        if: ${{env.REVISION != 'latest' && startsWith(github.ref, 'refs/tags') == false}}
        run: echo "REVISION=${REVISION}-SNAPSHOT" >> $GITHUB_ENV

      - uses: joschi/setup-jdk@v2.3.0
        with:
          java-version: 17

      - name: 'Cache local Maven repository'
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Set release version
        env:
          GH_ACTOR: ${{ secrets.DIGIPOST_BOT_USERNAME }}
          GH_TOKEN: ${{ secrets.DIGIPOST_LES_PACKAGE_TOKEN }}
        run: mvn --settings .mvn/settings.xml versions:set --no-transfer-progress -DnewVersion=$REVISION

      - name: Set mvn kommando for master
        if: ${{env.REVISION == 'latest'}}
        run: echo "MVNKOMMANDO=--settings .mvn/settings.xml clean verify --no-transfer-progress --show-version --batch-mode" >> $GITHUB_ENV

      - name: Set mvn kommando for branch
        if: ${{env.REVISION != 'latest'}}
        run: echo "MVNKOMMANDO=--settings .mvn/settings.xml clean verify jib:build --no-transfer-progress --show-version --batch-mode" >> $GITHUB_ENV

      - name: Set mvn kommando for tag
        if: ${{startsWith(github.ref, 'refs/tags') == true}}
        run: echo "MVNKOMMANDO=--settings .mvn/settings.xml -Dmaven.test.skip.exec clean package jib:build --no-transfer-progress --show-version --batch-mode" >> $GITHUB_ENV

      - name: Build 
        env:
          AZURECR_USERNAME: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          AZURECR_PASSWORD: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
          GH_ACTOR: ${{ secrets.DIGIPOST_BOT_USERNAME }}
          GH_TOKEN: ${{ secrets.DIGIPOST_LES_PACKAGE_TOKEN }}
          DPOST_HOME: /tmp
        run: |
          mvn $MVNKOMMANDO

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Feilet bygg
          path: |
            /home/runner/work/posten-faktura-adapter/posten-faktura-adapter/target/surefire-reports/**/*.*
